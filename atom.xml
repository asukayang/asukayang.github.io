<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>asuka-yang&#39;s blog</title>
  
  
  <link href="https://asukayang.github.io/atom.xml" rel="self"/>
  
  <link href="https://asukayang.github.io/"/>
  <updated>2021-02-07T06:34:02.311Z</updated>
  <id>https://asukayang.github.io/</id>
  
  <author>
    <name>asuka yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python图片转字符画</title>
    <link href="https://asukayang.github.io/2021/02/05/Python%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    <id>https://asukayang.github.io/2021/02/05/Python%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/</id>
    <published>2021-02-05T12:21:22.000Z</published>
    <updated>2021-02-07T06:34:02.311Z</updated>
    
    <content type="html"><![CDATA[<p>Python 图片转字符画是一个非常简单但实用的小程序。既可以练手熟悉Python，也可以拥有很好的Zhuang Bi效果。</p><p>既然是要将图像转成字符串，那么很明显的，必须要用到的就是<code>Python</code>的图像处理库，也就是大名鼎鼎的<code>PIL</code>，通过<code>PIL</code>读取图片的像素信息（灰度图是一维，如果是彩图则有RGB三个维度），再将所选择的字符串与灰度值（像素值）对应，然后输出。</p><p>图片转字符串总体来说可以有两种实现方法：</p><ol><li>输出图片形式。创建一个空白图像，在图像上直接在像素上填上字符串。这种方式可以输出彩色图像。</li><li>输出文本形式。这种形式也就是传统的字符画。如果是灰度图，直接读取灰度值，创建字符串与灰度值的映射，写入文本并保存。如果是RGB彩图，则将彩色图转换为灰度图，在映射灰度值与字符串，写入并输出。</li></ol><p>但要知道的是，不管用哪一种方式来进行图片的转换。都需要用<code>PIL</code>库对图片进行读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;image.jpg&quot;</span>) <span class="comment"># 读取文件</span></span><br><span class="line">img_width = img.size[<span class="number">0</span>] <span class="comment"># 提取照片宽度</span></span><br><span class="line">img_height = img.size[<span class="number">1</span>] <span class="comment"># 提取照片高度</span></span><br></pre></td></tr></table></figure><p>通过上面的图像完成了对图像的读取以及尺寸信息的提取。为下面的工作做准备。下面的生成字符画的部分则根据两种不同实现方法有不同的代码。</p><h2 id="输出图片形式"><a href="#输出图片形式" class="headerlink" title="输出图片形式"></a>输出图片形式</h2><p>输出图片格式字符画的核心就是创建空白图片，映射<strong>像素值</strong>与字符串，将字符串画在之前所创建的空白图像上。这一步需要用到<code>ImageFont</code>和<code>ImageDraw</code>模块。</p><p>创建空白图片部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create_array = np.ndarray([img_height,img_width,<span class="number">3</span>],np.unit8)</span><br><span class="line">create_array[:,:,:] = <span class="number">255</span></span><br></pre></td></tr></table></figure><p>上面这段代码是从<code>ndarray</code>对象创建了一张像素值为255的空白图像。</p><p><strong>完整代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw,ImageFont</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2char</span>(<span class="params">img_path</span>):</span></span><br><span class="line">    </span><br><span class="line">    im = Image.<span class="built_in">open</span>(img_path) <span class="comment"># 读取文件</span></span><br><span class="line"></span><br><span class="line">    img_width = im.size[<span class="number">0</span>] <span class="comment"># 提取照片宽度</span></span><br><span class="line">    img_height = im.size[<span class="number">1</span>] <span class="comment"># 提取照片高度</span></span><br><span class="line"></span><br><span class="line">    pix = im.load() <span class="comment"># 提取像素值（输出pixel对象）</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;The width of original Image is: %d, the height is %d&quot;</span> % (img_width,img_height))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建图像大小的三维数组</span></span><br><span class="line">    <span class="comment"># 将数组内数值设为255 （空白图像）</span></span><br><span class="line">    create_array = np.ndarray([img_height,img_width,<span class="number">3</span>], np.uint8)</span><br><span class="line">    create_array[:,:,:] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从数组创建图片</span></span><br><span class="line">    create_img = Image.fromarray(create_array)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建要绘制的类和字符串</span></span><br><span class="line"></span><br><span class="line">    chart = <span class="built_in">list</span>(<span class="string">&quot;EVA this is Asuka ! &quot;</span>)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, <span class="number">15</span>, encoding=<span class="string">&#x27;unic&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pix_count = <span class="number">0</span> <span class="comment"># 统计像素数量，初始值设为0</span></span><br><span class="line">    sample_step = <span class="number">5</span> <span class="comment"># 采样步长，因为原始图片过大，不用每个像素都采。</span></span><br><span class="line">    len_chart = <span class="built_in">len</span>(chart) <span class="comment"># 字符串长度</span></span><br><span class="line">    Draw = ImageDraw.Draw(create_img) <span class="comment"># 创建图片绘制对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img_width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img_height):</span><br><span class="line">            <span class="keyword">if</span> x % sample_step == <span class="number">0</span> <span class="keyword">and</span> y % sample_step == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 按像素和采样率，将字符串绘制入前面所创建的空白图像</span></span><br><span class="line">                Draw.text([x,y], chart[pix_count % len_chart], pix[x,y], font)</span><br><span class="line">                print(pix_count)</span><br><span class="line"></span><br><span class="line">                pix_count +=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 保存图像</span></span><br><span class="line">    create_img.save(<span class="string">&quot;str_image.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> create_img</span><br><span class="line"></span><br><span class="line">img2char(<span class="string">&quot;image.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="image2.jpg" alt="原图"></p><p><img src="str_image2.jpg" alt="字符画"></p><p>可以看到，用这种方法可以话说RGB彩色字符图。根据采样步长的不同也可以调整图像的精细程度。</p><h2 id="输出文本文件"><a href="#输出文本文件" class="headerlink" title="输出文本文件"></a>输出文本文件</h2><p>文本文件相比于上一个方法的缺点就是只能够处理灰度图 （因为最终文件的格式是<code>.txt</code>），所以第一步就应该是将彩色图像灰度化。RGB与灰度的转换可以使用下面的公式：$gray = 0.2126<em>r + 0.7152</em>g+0.0722*b$</p><p>或者直接调用<code>PIL</code>库里的自动转换函数<code>Image.convert</code>来实现RGB与灰度的自动转换。其他部分就比较简单了，对应字符串与灰度值，写入文本，保存输出。</p><p><strong>完整代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char_list = <span class="string">&#x27;&#x27;&#x27;@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,&quot;^`&#x27;. &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char</span>(<span class="params">gray_pix</span>):</span></span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(char_list) <span class="comment"># 确定字符串长度</span></span><br><span class="line">    unit = <span class="number">256.0</span>/length <span class="comment"># 分配每个字符占据的灰度值段</span></span><br><span class="line">    <span class="keyword">return</span> char_list[<span class="built_in">int</span>((((length-<span class="number">1</span>)*gray_pix))/<span class="number">256.0</span>)] <span class="comment"># 对应灰度值与字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&#x27;image2.jpg&#x27;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">img_widht = img.size[<span class="number">0</span>]</span><br><span class="line">img_height = img.size[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 缩放图片（因为有些图片太大所以需要缩放</span></span><br><span class="line">img = img.resize((<span class="built_in">int</span>(img_widht*<span class="number">0.75</span>),<span class="built_in">int</span>(img_height*<span class="number">0.5</span>)),Image.NEAREST) </span><br><span class="line">img_gray = np.array(img.convert(<span class="string">&#x27;L&#x27;</span>),<span class="string">&#x27;f&#x27;</span>) <span class="comment"># 彩色图转灰度图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文本文档并在相对应的位置写入对应字符</span></span><br><span class="line">text = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(img_height*<span class="number">0.5</span>)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(img_widht*<span class="number">0.75</span>)):</span><br><span class="line">        text = text + get_char(img_gray[i,j])</span><br><span class="line">    text = text + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(text)</span></span><br><span class="line"></span><br><span class="line">text_name = <span class="string">&quot;str_image2&quot;</span> + <span class="string">&quot;.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (text_name,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(text)</span><br><span class="line">    <span class="comment"># f.close()</span></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="image2.jpg" alt="原图"></p><p><img src="%E5%AD%97%E7%AC%A6%E5%9B%BE.jpg" alt="字符图"></p><p>可以看到无论是那种方法输出，结果都还是不错的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python 图片转字符画是一个非常简单但实用的小程序。既可以练手熟悉Python，也可以拥有很好的Zhuang Bi效果。&lt;/p&gt;
&lt;p&gt;既然是要将图像转成字符串，那么很明显的，必须要用到的就是&lt;code&gt;Python&lt;/code&gt;的图像处理库，也就是大名鼎鼎的&lt;code</summary>
      
    
    
    
    
    <category term="Python" scheme="https://asukayang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ImageFont库介绍</title>
    <link href="https://asukayang.github.io/2021/01/31/ImageFont%E5%BA%93%E4%BB%8B%E7%BB%8D/"/>
    <id>https://asukayang.github.io/2021/01/31/ImageFont%E5%BA%93%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-31T11:16:01.000Z</published>
    <updated>2021-01-31T11:39:42.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ImageFont模块介绍"><a href="#ImageFont模块介绍" class="headerlink" title="ImageFont模块介绍"></a>ImageFont模块介绍</h1><p><code>ImageFont</code>模块定义了一个同名<code>ImageFont</code>类。该类用于存储bitmap字体，通常和<code>PIL.ImageDraw.ImageDraw.text()</code>方法一起使用。</p><p><code>PIL</code>使用自带的字体文件格式存储bitmap。在Windows下使用的时候可以直接调用Windows自带的字体，但要注意路径格式，否则会出现OSERROR错误。</p><p><font color='yellow'>例：</font>(此例来自于PIL库官方文档)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont,ImageDraw</span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use bitmap font</span></span><br><span class="line"></span><br><span class="line">font = ImageFont(<span class="string">&#x27;arial.pil&#x27;</span>)</span><br><span class="line"></span><br><span class="line">draw.text((<span class="number">10</span>,<span class="number">10</span>), <span class="string">&quot;hello&quot;</span>, font=font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use a truefont font</span></span><br><span class="line"></span><br><span class="line">font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">draw.text((<span class="number">10</span>,<span class="number">25</span>), <span class="string">&quot;world&quot;</span>, font=font)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li><p><code>ImageFont.load(filename)</code></p><p>定义： 载入字体文件。该函数从已存在的bitmap文件中载入字体，并返回对应的字体对象。如果该函数运行失败，将会返回OSError错误。</p><ul><li><strong>变量 filename</strong>: 字体文件路径。</li><li><strong>返回</strong>：字体对象。</li><li> <strong>错误 OSError</strong>：若文件读取错误。</li></ul></li><li><p><code>ImageFont.load_path(filename)</code></p><p>定义：该函数作用与<code>ImageFont.load(file)</code>相同。</p><ul><li><strong>变量 filename</strong>：字体文件名</li><li><strong>返回</strong>：字体对象。</li><li><strong>错误 OSError</strong>： 文件读取错误。</li></ul></li></ol><ol start="3"><li><p><code>ImageFont.truetype(font=None,size=10,index=10,encoding=&quot;,layout_engine=None</code></p><p>定义：从指定的文件中加载TrueType或OpenType字体文件，并根据变量创造相应的字体对象。</p><p><strong>变量：</strong></p><ul><li><strong>font</strong>：一个包含了TrueTy字体的文件名或类文件对象。若文件不存在，则读取器会搜索其他的路径地址。</li><li><strong>size</strong>：所创建字体对象的大小。</li><li><strong>index</strong>：载入哪一种font face（默认第一个）。</li><li><strong>encoding</strong>：选择字体编码方式（默认Unicode）。可选择的编码：<ul><li>“unic”（Unicode）</li><li>“symb”(Microsoft Symbol)</li><li>“ADOB”(Adobe Standard)</li><li>“ADBE”(Adobe Expert)</li><li>“ADBC”(Adobe Custom)</li><li>“armn”(Apple Roman)</li><li>“sjis”(Shift JIS)</li><li>“gb”(PRC)</li><li>“big5”</li><li>“wans”(Extended Wansung)</li><li>“joha”(Johab)</li><li>“lat1”(Latin-1)</li></ul></li><li><strong>Layout_engine</strong>：选择layout engine。可选的有：<code>ImageFont.LAYOUT_BASIC</code>和<code>ImageFont.LAYOUT_RAQM</code>。</li></ul><p> <strong>返回</strong>：一个字体对象。<br> <strong>错误 OSError</strong>：文件读取错误。</p></li><li><p><code>ImageFont.load_default()</code></p><p><strong>定义</strong>：载入”better than nothing” 默认字体 （所以这到底是个啥？？）。</p><p>此为1.1.4版本新功能。</p><p><strong>返回</strong>： 一个字体对象。</p></li></ol><h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Pil <span class="keyword">import</span> Image, ImageFont, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="comment"># open original image</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;image.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, <span class="number">50</span>,encoding=<span class="string">&#x27;unic&#x27;</span>)</span><br><span class="line">draw = ImageDrwa.Draw(im)</span><br><span class="line"></span><br><span class="line">draw.text((<span class="number">100</span>,<span class="number">150</span>), <span class="string">&quot;EVA-Asuka&quot;</span>, font=font)</span><br><span class="line">draw.text((<span class="number">100</span>,<span class="number">200</span>), <span class="string">&quot;hello world !!!&quot;</span>, font=font)</span><br><span class="line"></span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p><strong>原图</strong>：</p><p><img src="image.jpg"></p><p><font color="yellow"><strong>添加文字后的图像：</strong></font></p><p><img src="after.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ImageFont模块介绍&quot;&gt;&lt;a href=&quot;#ImageFont模块介绍&quot; class=&quot;headerlink&quot; title=&quot;ImageFont模块介绍&quot;&gt;&lt;/a&gt;ImageFont模块介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ImageFont&lt;/code&gt;模块定义</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://asukayang.github.io/2021/01/24/hello-world/"/>
    <id>https://asukayang.github.io/2021/01/24/hello-world/</id>
    <published>2021-01-24T13:40:02.302Z</published>
    <updated>2021-01-24T13:40:02.302Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://asukayang.github.io/2021/01/24/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://asukayang.github.io/2021/01/24/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-01-24T08:34:58.000Z</published>
    <updated>2021-01-24T08:40:41.820Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都有一个写点东西的想法，但因为重度拖延症的关系，一直也没有付诸实践。这次趁着有较长的空闲时间，想了想也需要一个新的开始。</p><p>开始写博客的初衷呢，一是希望可以借由博客这个载体对自己日常所学习到的知识进行一个整理和总结。二是也算是某种意义上逼迫自己要不断地前进，不断地产出新的东西，不断地学习。希望在以后自己能不断的进步。</p><p>嘛。。。总归是希望不要鸽掉，加油吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直以来都有一个写点东西的想法，但因为重度拖延症的关系，一直也没有付诸实践。这次趁着有较长的空闲时间，想了想也需要一个新的开始。&lt;/p&gt;
&lt;p&gt;开始写博客的初衷呢，一是希望可以借由博客这个载体对自己日常所学习到的知识进行一个整理和总结。二是也算是某种意义上逼迫自己要不断地前</summary>
      
    
    
    
    
  </entry>
  
</feed>
